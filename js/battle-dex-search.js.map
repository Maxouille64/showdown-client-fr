{"version":3,"file":"battle-dex-search.js","names":["DexSearch","searchType","formatid","species","query","dex","Dex","typedSearch","results","exactMatch","firstPokemonColumn","sortCol","reverseSort","filters","setType","getTypedSearch","format","speciesOrSet","BattlePokemonSearch","BattleItemSearch","BattleMoveSearch","BattleAbilitySearch","BattleTypeSearch","BattleCategorySearch","find","toID","getResults","textSearch","addFilter","entry","type","includes","filter","push","removeFilter","filterid","join","deleted","i","length","splice","pop","toggleSort","filterLabel","filterType","illegalLabel","id","illegalReasons","getTier","searchTypeIndex","typeTable","qFilterType","slice","window","BattleTypeChart","getClosest","BattleSearchIndex","passType","searchPasses","queryAlias","BattleAliases","aliasPassType","unshift","substr","matchLength","matchQuery","bufs","topbufIndex","count","nearMatch","instafilter","instafilterSort","illegal","searchPass","shift","typeIndex","gen","startsWith","matchStart","matchEnd","originalIndex","BattleSearchIndexOffset","charCodeAt","typeName","curBufLength","topbuf","concat","Array","prototype","apply","fType","fId","buf","illegalBuf","charAt","toUpperCase","BattlePokedex","types","get","ability","abilities","name","hasAbility","BattleMovedex","category","left","right","mid","Math","floor","pokemon","tier","move","item","egggroup","article","BattleTypedSearch","set","formatType","baseResults","baseIllegalResults","sortRow","Number","forGen","mod","endsWith","getDefaultResults","call","getBaseResults","legalityFilter","resultType","value","getTable","illegalResults","result","rowType","sort","firstLearnsetid","speciesid","table","BattleTeambuilderTable","learnsets","exists","baseLearnsetid","baseSpecies","battleOnly","nextLearnsetid","learnsetid","lsetSpecies","next","changesFrom","prevo","canLearn","moveid","moves","isNonstandard","genChar","learnset","num","String","tableKey","overrideTier","isVGCOrBS","isDoublesOrBS","tierSet","tiers","map","r","slices","formatSlices","Uber","Regular","OU","UU","RU","NU","PU","ZU","LC","AG","DUber","DOU","DUU","DNU","zuBans","monotypeBans","test","row","eggGroups","sortOrder","rowType1","id1","rowType2","id2","stat1","baseStats","stat2","base1","base2","bst1","hp","atk","def","spa","spd","spe","bst2","name1","name2","Error","BattleAbilities","isHackmons","isAAA","abilitySet","isMega","goodAbilities","poorAbilities","badAbilities","abil","rating","BattleItems","itemSet","items","speciesName","speciesSpecific","itemUser","moveIsNotUseless","abilityid","itemid","weightkg","evos","GOOD_DOUBLES_MOVES","moveData","GOOD_STATUS_MOVES","basePower","GOOD_WEAK_MOVES","flags","charge","recharge","BAD_STRONG_MOVES","isSTABmons","isTradebacks","regionBornLegality","sketchMoves","sketch","lsetTable","learnsetEntry","minGenCode","nonstandardMoves","noSketch","isMax","isZ","speciesTypes","moveTypes","genDex","prevoSpecies","excludedForme","s","forme","otherFormes","formeName","valid","usableMoves","uselessMoves","isUsable","powerTable","frustration","spitup","trumpcard","naturalgift","grassknot","lowkick","gyroball","electroball","flail","reversal","present","wringout","crushgrip","heatcrash","heavyslam","fling","magnitude","beatup","punishment","psywave","nightshade","seismictoss","dragonrage","sonicboom","superfang","endeavor","sheercold","fissure","horndrill","guillotine","move1","move2","pow1","pow2","accuracy1","accuracy","accuracy2","pp1","pp","pp2","physical","special","status"],"sources":["../src/battle-dex-search.ts"],"sourcesContent":["/**\n * Search\n *\n * Code for searching for dex information, used by the Dex and\n * Teambuilder.\n *\n * Dependencies: battledata, search-index\n * Optional dependencies: pokedex, moves, items, abilities\n *\n * @author Guangcong Luo <guangcongluo@gmail.com>\n * @license MIT\n */\n\ntype SearchType = (\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\n);\n\ntype SearchRow = (\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\n);\n\ntype SearchFilter = [string, string];\n\n/** ID, SearchType, index (if alias), offset (if offset alias) */\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\ndeclare const BattleSearchIndexOffset: any;\ndeclare const BattleTeambuilderTable: any;\n\n/**\n * Backend for search UIs.\n */\nclass DexSearch {\n\tquery = '';\n\n\t/**\n\t * Dex for the mod/generation to search.\n\t */\n\tdex: ModdedDex = Dex;\n\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\n\n\tresults: SearchRow[] | null = null;\n\texactMatch = false;\n\n\tstatic typeTable = {\n\t\tpokemon: 1,\n\t\ttype: 2,\n\t\ttier: 3,\n\t\tmove: 4,\n\t\titem: 5,\n\t\tability: 6,\n\t\tegggroup: 7,\n\t\tcategory: 8,\n\t\tarticle: 9,\n\t};\n\tstatic typeName = {\n\t\tpokemon: 'Pok&eacute;mon',\n\t\ttype: 'Type',\n\t\ttier: 'Tiers',\n\t\tmove: 'Moves',\n\t\titem: 'Items',\n\t\tability: 'Abilities',\n\t\tegggroup: 'Egg group',\n\t\tcategory: 'Category',\n\t\tarticle: 'Article',\n\t};\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\n\n\t/**\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\n\t * things are according to the base filters, falling back to dex number (for\n\t * Pokemon) and name (for everything else).\n\t */\n\tsortCol: string | null = null;\n\treverseSort = false;\n\n\t/**\n\t * Filters for the search result. Does not include the two base filters\n\t * (format and species).\n\t */\n\tfilters: SearchFilter[] | null = null;\n\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\n\t\tthis.setType(searchType, formatid, species);\n\t}\n\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\n\t\tif (!searchType) return null;\n\t\tswitch (searchType) {\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\n\t\t}\n\t\treturn null;\n\t}\n\n\tfind(query: string) {\n\t\tquery = toID(query);\n\t\tif (this.query === query && this.results) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.query = query;\n\t\tif (!query) {\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol, this.reverseSort) || [];\n\t\t} else {\n\t\t\tthis.results = this.textSearch(query);\n\t\t}\n\t\treturn true;\n\t}\n\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\n\t\t// invalidate caches\n\t\tthis.results = null;\n\n\t\tif (searchType !== this.typedSearch?.searchType) {\n\t\t\tthis.filters = null;\n\t\t\tthis.sortCol = null;\n\t\t}\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\n\t}\n\n\taddFilter(entry: SearchFilter): boolean {\n\t\tif (!this.typedSearch) return false;\n\t\tlet [type] = entry;\n\t\tif (this.typedSearch.searchType === 'pokemon') {\n\t\t\tif (type === this.sortCol) this.sortCol = null;\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\n\t\t\tif (!this.filters) this.filters = [];\n\t\t\tthis.results = null;\n\t\t\tfor (const filter of this.filters) {\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.filters.push(entry);\n\t\t\treturn true;\n\t\t} else if (this.typedSearch.searchType === 'move') {\n\t\t\tif (type === this.sortCol) this.sortCol = null;\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\n\t\t\tif (!this.filters) this.filters = [];\n\t\t\tthis.filters.push(entry);\n\t\t\tthis.results = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tremoveFilter(entry?: SearchFilter): boolean {\n\t\tif (!this.filters) return false;\n\t\tif (entry) {\n\t\t\tconst filterid = entry.join(':');\n\t\t\tlet deleted: string[] | null = null;\n\t\t\t// delete specific filter\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\n\t\t\t\t\tdeleted = this.filters[i];\n\t\t\t\t\tthis.filters.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!deleted) return false;\n\t\t} else {\n\t\t\tthis.filters.pop();\n\t\t}\n\t\tif (!this.filters.length) this.filters = null;\n\t\tthis.results = null;\n\t\treturn true;\n\t}\n\n\ttoggleSort(sortCol: string) {\n\t\tif (this.sortCol === sortCol) {\n\t\t\tif (!this.reverseSort) {\n\t\t\t\tthis.reverseSort = true;\n\t\t\t} else {\n\t\t\t\tthis.sortCol = null;\n\t\t\t\tthis.reverseSort = false;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.sortCol = sortCol;\n\t\t\tthis.reverseSort = false;\n\t\t}\n\t\tthis.results = null;\n\t}\n\n\tfilterLabel(filterType: string) {\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\n\t\t\treturn 'Filter';\n\t\t}\n\t\treturn null;\n\t}\n\tillegalLabel(id: ID) {\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\n\t}\n\n\tgetTier(species: Species) {\n\t\treturn this.typedSearch?.getTier(species) || '';\n\t}\n\n\ttextSearch(query: string): SearchRow[] {\n\t\tquery = toID(query);\n\n\t\tthis.exactMatch = false;\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\n\n\t\t// If searchType exists, we're searching mainly for results of that type.\n\t\t// We'll still search for results of other types, but those results\n\t\t// will only be used to filter results for that type.\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\n\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\n\t\tlet qFilterType: 'type' | '' = '';\n\t\tif (query.slice(-4) === 'type') {\n\t\t\tif (query.slice(0, -4) in window.BattleTypeChart) {\n\t\t\t\tquery = query.slice(0, -4);\n\t\t\t\tqFilterType = 'type';\n\t\t\t}\n\t\t}\n\n\t\t// i represents the location of the search index we're looking at\n\t\tlet i = DexSearch.getClosest(query);\n\t\tthis.exactMatch = (BattleSearchIndex[i][0] === query);\n\n\t\t// Even with output buffer buckets, we make multiple passes through\n\t\t// the search index. searchPasses is a queue of which pass we're on:\n\t\t// [passType, i, query]\n\n\t\t// By doing an alias pass after the normal pass, we ensure that\n\t\t// mid-word matches only display after start matches.\n\t\tlet passType: SearchPassType | '' = '';\n\t\t/**\n\t\t * pass types:\n\t\t * * '': time to pop the next pass off the searchPasses queue\n\t\t * * 'normal': start at i and stop when results no longer start with query\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\n\t\t * * 'fuzzy': start at i and stop when you have two results\n\t\t * * 'exact': like normal, but stop at i\n\t\t */\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\n\t\t/**\n\t\t * [passType, i, query]\n\t\t *\n\t\t * i = index of BattleSearchIndex to start from\n\t\t *\n\t\t * By doing an alias pass after the normal pass, we ensure that\n\t\t * mid-word matches only display after start matches.\n\t\t */\n\t\ttype SearchPass = [SearchPassType, number, string];\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\n\n\t\t// For performance reasons, only do an alias pass if query is at\n\t\t// least 2 chars long\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\n\n\t\t// If the query matches an official alias in BattleAliases: These are\n\t\t// different from the aliases in the search index and are given\n\t\t// higher priority. We'll do a normal pass through the index with\n\t\t// the alias text before any other passes.\n\t\tlet queryAlias;\n\t\tif (query in BattleAliases) {\n\t\t\tif (['sub', 'tr'].includes(query) || toID(BattleAliases[query]).slice(0, query.length) !== query) {\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\n\t\t\t\tsearchPasses.unshift([aliasPassType, DexSearch.getClosest(queryAlias), queryAlias]);\n\t\t\t}\n\t\t\tthis.exactMatch = true;\n\t\t}\n\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\n\t\t// Fuzzy matches will still be shown after alias matches\n\t\tif (!this.exactMatch && BattleSearchIndex[i][0].substr(0, query.length) !== query) {\n\t\t\t// No results start with this. Do a fuzzy match pass.\n\t\t\tlet matchLength = query.length - 1;\n\t\t\tif (!i) i++;\n\t\t\twhile (matchLength &&\n\t\t\t\tBattleSearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\n\t\t\t\tBattleSearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\n\t\t\t\tmatchLength--;\n\t\t\t}\n\t\t\tlet matchQuery = query.substr(0, matchLength);\n\t\t\twhile (i >= 1 && BattleSearchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\n\t\t}\n\n\t\t// We split the output buffers into 8 buckets.\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\n\t\t// pokemon, types, moves, etc (see typeTable).\n\n\t\t// When we're done, the buffers are concatenated together to form\n\t\t// our results, with each buffer getting its own header, unlike\n\t\t// multiple-pass results, which have no header.\n\n\t\t// Notes:\n\t\t// - if we have a searchType, that searchType's buffer will be on top\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\n\t\tlet topbufIndex = -1;\n\n\t\tlet count = 0;\n\t\tlet nearMatch = false;\n\n\t\t/** [type, id, typeIndex] */\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\n\t\tlet illegal = this.typedSearch?.illegalReasons;\n\n\t\t// We aren't actually looping through the entirety of the searchIndex\n\t\tfor (i = 0; i < BattleSearchIndex.length; i++) {\n\t\t\tif (!passType) {\n\t\t\t\tlet searchPass = searchPasses.shift();\n\t\t\t\tif (!searchPass) break;\n\t\t\t\tpassType = searchPass[0];\n\t\t\t\ti = searchPass[1];\n\t\t\t\tquery = searchPass[2];\n\t\t\t}\n\n\t\t\tlet entry = BattleSearchIndex[i];\n\t\t\tlet id = entry[0];\n\t\t\tlet type = entry[1];\n\n\t\t\tif (!id) break;\n\n\t\t\tif (passType === 'fuzzy') {\n\t\t\t\t// fuzzy match pass; stop after 2 results\n\t\t\t\tif (count >= 2) {\n\t\t\t\t\tpassType = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnearMatch = true;\n\t\t\t} else if (passType === 'exact') {\n\t\t\t\t// exact pass; stop after 1 result\n\t\t\t\tif (count >= 1) {\n\t\t\t\t\tpassType = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (id.substr(0, query.length) !== query) {\n\t\t\t\t// regular pass, time to move onto our next match\n\t\t\t\tpassType = '';\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (entry.length > 2) {\n\t\t\t\t// alias entry\n\t\t\t\tif (passType !== 'alias') continue;\n\t\t\t} else {\n\t\t\t\t// normal entry\n\t\t\t\tif (passType === 'alias') continue;\n\t\t\t}\n\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\n\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\n\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\n\t\t\tif (searchType === 'pokemon' && typeIndex === 3 && this.dex.gen < 9) continue;\n\t\t\t// For move queries, accept types/categories as filters\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\n\t\t\t// For ability/item queries, don't accept anything else as a filter\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\n\t\t\t// Query was a type name followed 'type'; only show types\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\n\n\t\t\tlet matchStart = 0;\n\t\t\tlet matchEnd = 0;\n\t\t\tif (passType === 'alias') {\n\t\t\t\t// alias entry\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\n\t\t\t\tmatchStart = entry[3]!;\n\t\t\t\tlet originalIndex = entry[2]!;\n\t\t\t\tif (matchStart) {\n\t\t\t\t\tmatchEnd = matchStart + query.length;\n\t\t\t\t\tmatchStart += (BattleSearchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\n\t\t\t\t\tmatchEnd += (BattleSearchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\n\t\t\t\t}\n\t\t\t\tid = BattleSearchIndex[originalIndex][0];\n\t\t\t} else {\n\t\t\t\tmatchEnd = query.length;\n\t\t\t\tif (matchEnd) matchEnd += (BattleSearchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\n\t\t\t}\n\n\t\t\t// some aliases are substrings\n\t\t\tif (queryAlias === id && query !== id) continue;\n\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\n\t\t\t\t// This is a filter, set it as an instafilter candidate\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// show types above Arceus formes\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\n\t\t\t\ttopbufIndex = 2;\n\t\t\t}\n\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\n\t\t\t\t// Always show illegal results under legal results.\n\t\t\t\t// This is done by putting legal results (and the type header)\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\n\t\t\t\t// illegal results will be seamlessly right under legal results.\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\n\t\t\t\t}\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\n\t\t\t} else {\n\t\t\t\tif (!bufs[typeIndex].length) {\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// don't match duplicate aliases\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\n\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\n\n\t\t\tcount++;\n\t\t}\n\n\t\tlet topbuf: SearchRow[] = [];\n\t\tif (nearMatch) {\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\n\t\t}\n\t\tif (topbufIndex >= 0) {\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\n\t\t\tbufs[topbufIndex] = [];\n\t\t}\n\t\tif (searchTypeIndex >= 0) {\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\n\t\t\tbufs[searchTypeIndex] = [];\n\t\t\tbufs[0] = [];\n\t\t}\n\n\t\tif (instafilter && count < 20) {\n\t\t\t// Result count is less than 20, so we can instafilter\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\n\t\t}\n\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\n\t\treturn this.results;\n\t}\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\n\t\tlet buf: SearchRow[] = [];\n\t\tlet illegalBuf: SearchRow[] = [];\n\t\tlet illegal = this.typedSearch?.illegalReasons;\n\t\tif (searchType === 'pokemon') {\n\t\t\tswitch (fType) {\n\t\t\tcase 'type':\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as TypeName;\n\t\t\t\tbuf.push(['header', `${type}-type Pok&eacute;mon`]);\n\t\t\t\tfor (let id in BattlePokedex) {\n\t\t\t\t\tif (!BattlePokedex[id].types) continue;\n\t\t\t\t\tif (this.dex.species.get(id).types.includes(type)) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'ability':\n\t\t\t\tlet ability = Dex.abilities.get(fId).name;\n\t\t\t\tbuf.push(['header', `${ability} Pok&eacute;mon`]);\n\t\t\t\tfor (let id in BattlePokedex) {\n\t\t\t\t\tif (!BattlePokedex[id].abilities) continue;\n\t\t\t\t\tif (Dex.hasAbility(this.dex.species.get(id), ability)) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (searchType === 'move') {\n\t\t\tswitch (fType) {\n\t\t\tcase 'type':\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\n\t\t\t\tfor (let id in BattleMovedex) {\n\t\t\t\t\tif (BattleMovedex[id].type === type) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'category':\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\n\t\t\t\tbuf.push(['header', `${category} moves`]);\n\t\t\t\tfor (let id in BattleMovedex) {\n\t\t\t\t\tif (BattleMovedex[id].category === category) {\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn [...buf, ...illegalBuf];\n\t}\n\n\tstatic getClosest(query: string) {\n\t\t// binary search through the index!\n\t\tlet left = 0;\n\t\tlet right = BattleSearchIndex.length - 1;\n\t\twhile (right > left) {\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\n\t\t\t\t// that's us\n\t\t\t\treturn mid;\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\n\t\t\t\tleft = mid + 1;\n\t\t\t} else {\n\t\t\t\tright = mid - 1;\n\t\t\t}\n\t\t}\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\n\t\treturn left;\n\t}\n}\n\nabstract class BattleTypedSearch<T extends SearchType> {\n\tsearchType: T;\n\t/**\n\t * Dex for the mod/generation to search.\n\t */\n\tdex: ModdedDex = Dex;\n\t/**\n\t * Format is the first of two base filters. It constrains results to things\n\t * legal in the format, and affects the default sort.\n\t *\n\t * This string specifically normalizes out generation number and the words\n\t * \"Doubles\" and \"Let's Go\" from the name.\n\t */\n\tformat = '' as ID;\n\t/**\n\t * `species` is the second of two base filters. It constrains results to\n\t * things that species can use, and affects the default sort.\n\t */\n\tspecies = '' as ID;\n\t/**\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\n\t * (Abilities/items can affect what moves are sorted as usable.)\n\t */\n\tset: PokemonSet | null = null;\n\n\tprotected formatType: 'doubles' | 'bdsp' | 'bdspdoubles' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' |\n\t'dlc1' | 'dlc1doubles' | 'stadium' | null = null;\n\n\t/**\n\t * Cached copy of what the results list would be with only base filters\n\t * (i.e. with an empty `query` and `filters`)\n\t */\n\tbaseResults: SearchRow[] | null = null;\n\t/**\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\n\t * is wondering why a specific result isn't showing up.\n\t */\n\tbaseIllegalResults: SearchRow[] | null = null;\n\tillegalReasons: {[id: string]: string} | null = null;\n\tresults: SearchRow[] | null = null;\n\n\tprotected readonly sortRow: SearchRow | null = null;\n\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\n\t\tthis.searchType = searchType;\n\n\t\tthis.baseResults = null;\n\t\tthis.baseIllegalResults = null;\n\n\t\tif (format.slice(0, 3) === 'gen') {\n\t\t\tconst gen = (Number(format.charAt(3)) || 6);\n\t\t\tformat = (format.slice(4) || 'customgame') as ID;\n\t\t\tthis.dex = Dex.forGen(gen);\n\t\t} else if (!format) {\n\t\t\tthis.dex = Dex;\n\t\t}\n\n\t\tif (format.startsWith('dlc1')) {\n\t\t\tif (format.includes('doubles')) {\n\t\t\t\tthis.formatType = 'dlc1doubles';\n\t\t\t} else {\n\t\t\t\tthis.formatType = 'dlc1';\n\t\t\t}\n\t\t\tformat = format.slice(4) as ID;\n\t\t}\n\t\tif (format.startsWith('stadium')) {\n\t\t\tthis.formatType = 'stadium';\n\t\t\tformat = format.slice(7) as ID;\n\t\t\tif (!format) format = 'ou' as ID;\n\t\t}\n\t\tif (format.startsWith('vgc')) this.formatType = 'doubles';\n\t\tif (format === 'vgc2020') this.formatType = 'dlc1doubles';\n\t\tif (format.includes('bdsp')) {\n\t\t\tif (format.includes('doubles')) {\n\t\t\t\tthis.formatType = 'bdspdoubles';\n\t\t\t} else {\n\t\t\t\tthis.formatType = 'bdsp';\n\t\t\t}\n\t\t\tformat = format.slice(4) as ID;\n\t\t\tthis.dex = Dex.mod('gen8bdsp' as ID);\n\t\t}\n\t\tif (format.includes('doubles') && this.dex.gen > 4 && !this.formatType) this.formatType = 'doubles';\n\t\tif (format === 'partnersincrime') this.formatType = 'doubles';\n\t\tif (format.startsWith('ffa') || format === 'freeforall') this.formatType = 'doubles';\n\t\tif (format.includes('letsgo')) {\n\t\t\tthis.formatType = 'letsgo';\n\t\t\tthis.dex = Dex.mod('gen7letsgo' as ID);\n\t\t}\n\t\tif (format.includes('nationaldex') || format.startsWith('nd') || format.includes('natdex')) {\n\t\t\tformat = (format.startsWith('nd') ? format.slice(2) :\n\t\t\t\tformat.includes('natdex') ? format.slice(6) : format.slice(11)) as ID;\n\t\t\tthis.formatType = 'natdex';\n\t\t\tif (!format) format = 'ou' as ID;\n\t\t}\n\t\tif (this.formatType === 'letsgo') format = format.slice(6) as ID;\n\t\tif (format.includes('metronome')) {\n\t\t\tthis.formatType = 'metronome';\n\t\t}\n\t\tif (format.endsWith('nfe')) {\n\t\t\tformat = format.slice(3) as ID;\n\t\t\tthis.formatType = 'nfe';\n\t\t\tif (!format) format = 'ou' as ID;\n\t\t}\n\t\tthis.format = format;\n\n\t\tthis.species = '' as ID;\n\t\tthis.set = null;\n\t\tif (typeof speciesOrSet === 'string') {\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\n\t\t} else {\n\t\t\tthis.set = speciesOrSet as PokemonSet;\n\t\t\tthis.species = toID(this.set.species);\n\t\t}\n\t\tif (!searchType || !this.set) return;\n\t}\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tif (sortCol === 'type') {\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this)];\n\t\t} else if (sortCol === 'category') {\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this)];\n\t\t} else if (sortCol === 'ability') {\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this)];\n\t\t}\n\n\t\tif (!this.baseResults) {\n\t\t\tthis.baseResults = this.getBaseResults();\n\t\t}\n\n\t\tif (!this.baseIllegalResults) {\n\t\t\tconst legalityFilter: {[id: string]: 1} = {};\n\t\t\tfor (const [resultType, value] of this.baseResults) {\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\n\t\t\t}\n\t\t\tthis.baseIllegalResults = [];\n\t\t\tthis.illegalReasons = {};\n\n\t\t\tfor (const id in this.getTable()) {\n\t\t\t\tif (!(id in legalityFilter)) {\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet results: SearchRow[];\n\t\tlet illegalResults: SearchRow[] | null;\n\n\t\tif (filters) {\n\t\t\tresults = [];\n\t\t\tillegalResults = [];\n\t\t\tfor (const result of this.baseResults) {\n\t\t\t\tif (this.filter(result, filters)) {\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\n\t\t\t\t\t\tresults[results.length - 1] = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.push(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\n\t\t\t\tresults.pop();\n\t\t\t}\n\t\t\tfor (const result of this.baseIllegalResults) {\n\t\t\t\tif (this.filter(result, filters)) {\n\t\t\t\t\tillegalResults.push(result);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresults = [...this.baseResults];\n\t\t\tillegalResults = null;\n\t\t}\n\n\t\tif (sortCol) {\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\n\t\t\tresults = this.sort(results, sortCol, reverseSort);\n\t\t\tif (illegalResults) {\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol, reverseSort);\n\t\t\t}\n\t\t}\n\n\t\tif (this.sortRow) {\n\t\t\tresults = [this.sortRow, ...results];\n\t\t}\n\t\tif (illegalResults && illegalResults.length) {\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\n\t\t}\n\t\treturn results;\n\t}\n\tprotected firstLearnsetid(speciesid: ID) {\n\t\tlet table = BattleTeambuilderTable;\n\t\tif (this.formatType?.startsWith('bdsp')) table = table['gen8bdsp'];\n\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\n\t\tif (speciesid in table.learnsets) return speciesid;\n\t\tconst species = this.dex.species.get(speciesid);\n\t\tif (!species.exists) return '' as ID;\n\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\n\t\t}\n\t\tif (baseLearnsetid in table.learnsets) return baseLearnsetid;\n\t\treturn '' as ID;\n\t}\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID) {\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\n\t\t\treturn 'rockruffdusk' as ID;\n\t\t}\n\t\tconst lsetSpecies = this.dex.species.get(learnsetid);\n\t\tif (!lsetSpecies.exists) return '' as ID;\n\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\n\t\tif (lsetSpecies.id === 'sinisteaantique') return 'sinistea' as ID;\n\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\n\t\tif (next) return toID(next);\n\n\t\treturn '' as ID;\n\t}\n\tprotected canLearn(speciesid: ID, moveid: ID) {\n\t\tconst move = this.dex.moves.get(moveid);\n\t\tif (this.formatType === 'natdex' && move.isNonstandard && move.isNonstandard !== 'Past') {\n\t\t\treturn false;\n\t\t}\n\t\tconst gen = this.dex.gen;\n\t\tlet genChar = `${gen}`;\n\t\tif (\n\t\t\tthis.format.startsWith('vgc') ||\n\t\t\tthis.format.startsWith('battlespot') ||\n\t\t\tthis.format.startsWith('battlestadium') ||\n\t\t\tthis.format.startsWith('battlefestival') ||\n\t\t\t(this.dex.gen === 9 && this.formatType !== 'natdex')\n\t\t) {\n\t\t\tif (gen === 9) {\n\t\t\t\tgenChar = 'a';\n\t\t\t} else if (gen === 8) {\n\t\t\t\tgenChar = 'g';\n\t\t\t} else if (gen === 7) {\n\t\t\t\tgenChar = 'q';\n\t\t\t} else if (gen === 6) {\n\t\t\t\tgenChar = 'p';\n\t\t\t}\n\t\t}\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\n\t\twhile (learnsetid) {\n\t\t\tlet table = BattleTeambuilderTable;\n\t\t\tif (this.formatType?.startsWith('bdsp')) table = table['gen8bdsp'];\n\t\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\n\t\t\tlet learnset = table.learnsets[learnsetid];\n\t\t\tif (learnset && (moveid in learnset) && (!this.format.startsWith('tradebacks') ? learnset[moveid].includes(genChar) :\n\t\t\t\tlearnset[moveid].includes(genChar) ||\n\t\t\t\t\t(learnset[moveid].includes(`${gen + 1}`) && move.gen === gen))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\n\t\t}\n\t\treturn false;\n\t}\n\tgetTier(pokemon: Species) {\n\t\tif (this.formatType === 'metronome') {\n\t\t\treturn pokemon.num >= 0 ? String(pokemon.num) : pokemon.tier;\n\t\t}\n\t\tlet table = window.BattleTeambuilderTable;\n\t\tconst gen = this.dex.gen;\n\t\tconst tableKey = this.formatType === 'doubles' ? `gen${gen}doubles` :\n\t\t\tthis.formatType === 'letsgo' ? 'gen7letsgo' :\n\t\t\tthis.formatType === 'bdsp' ? 'gen8bdsp' :\n\t\t\tthis.formatType === 'bdspdoubles' ? 'gen8bdspdoubles' :\n\t\t\tthis.formatType === 'nfe' ? `gen${gen}nfe` :\n\t\t\tthis.formatType === 'dlc1' ? 'gen8dlc1' :\n\t\t\tthis.formatType === 'dlc1doubles' ? 'gen8dlc1doubles' :\n\t\t\tthis.formatType === 'natdex' ? `gen${gen}natdex` :\n\t\t\tthis.formatType === 'stadium' ? `gen${gen}stadium${gen > 1 ? gen : ''}` :\n\t\t\t`gen${gen}`;\n\t\tif (table && table[tableKey]) {\n\t\t\ttable = table[tableKey];\n\t\t}\n\t\tif (!table) return pokemon.tier;\n\n\t\tlet id = pokemon.id;\n\t\tif (id in table.overrideTier) {\n\t\t\treturn table.overrideTier[id];\n\t\t}\n\t\tif (id.slice(-5) === 'totem' && id.slice(0, -5) in table.overrideTier) {\n\t\t\treturn table.overrideTier[id.slice(0, -5)];\n\t\t}\n\t\tid = toID(pokemon.baseSpecies);\n\t\tif (id in table.overrideTier) {\n\t\t\treturn table.overrideTier[id];\n\t\t}\n\n\t\treturn pokemon.tier;\n\t}\n\tabstract getTable(): {[id: string]: any};\n\tabstract getDefaultResults(): SearchRow[];\n\tabstract getBaseResults(): SearchRow[];\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\n\tabstract sort(input: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[];\n}\n\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\n\tsortRow: SearchRow = ['sortpokemon', ''];\n\tgetTable() {\n\t\treturn BattlePokedex;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tlet results: SearchRow[] = [];\n\t\tfor (let id in BattlePokedex) {\n\t\t\tswitch (id) {\n\t\t\tcase 'bulbasaur':\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'chikorita':\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'treecko':\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'turtwig':\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'victini':\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'chespin':\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'rowlet':\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'grookey':\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'sprigatito':\n\t\t\t\tresults.push(['header', \"Generation 9\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'missingno':\n\t\t\t\tresults.push(['header', \"Glitch\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'syclar':\n\t\t\t\tresults.push(['header', \"CAP\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'pikachucosplay':\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresults.push(['pokemon', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tgetBaseResults(): SearchRow[] {\n\t\tconst format = this.format;\n\t\tif (!format) return this.getDefaultResults();\n\t\tconst isVGCOrBS = format.startsWith('battlespot') || format.startsWith('battlestadium') || format.startsWith('vgc');\n\t\tlet isDoublesOrBS = isVGCOrBS || this.formatType?.includes('doubles');\n\t\tconst dex = this.dex;\n\n\t\tlet table = BattleTeambuilderTable;\n\t\tif ((format.endsWith('cap') || format.endsWith('caplc')) && dex.gen < 9) {\n\t\t\ttable = table['gen' + dex.gen];\n\t\t} else if (isVGCOrBS) {\n\t\t\ttable = table['gen' + dex.gen + 'vgc'];\n\t\t} else if (\n\t\t\ttable['gen' + dex.gen + 'doubles'] && dex.gen > 4 &&\n\t\t\tthis.formatType !== 'letsgo' && this.formatType !== 'bdspdoubles' && this.formatType !== 'dlc1doubles' &&\n\t\t\t(\n\t\t\t\tformat.includes('doubles') || format.includes('triples') ||\n\t\t\t\tformat === 'freeforall' || format.startsWith('ffa') ||\n\t\t\t\tformat === 'partnersincrime'\n\t\t\t)\n\t\t) {\n\t\t\ttable = table['gen' + dex.gen + 'doubles'];\n\t\t\tisDoublesOrBS = true;\n\t\t} else if (dex.gen < 9 && !this.formatType) {\n\t\t\ttable = table['gen' + dex.gen];\n\t\t} else if (this.formatType?.startsWith('bdsp')) {\n\t\t\ttable = table['gen8' + this.formatType];\n\t\t} else if (this.formatType === 'letsgo') {\n\t\t\ttable = table['gen7letsgo'];\n\t\t} else if (this.formatType === 'natdex') {\n\t\t\ttable = table['gen' + this.dex.gen + 'natdex'];\n\t\t} else if (this.formatType === 'metronome') {\n\t\t\ttable = table['gen' + dex.gen + 'metronome'];\n\t\t} else if (this.formatType === 'nfe') {\n\t\t\ttable = table['gen' + dex.gen + 'nfe'];\n\t\t} else if (this.formatType?.startsWith('dlc1')) {\n\t\t\tif (this.formatType.includes('doubles')) {\n\t\t\t\ttable = table['gen8dlc1doubles'];\n\t\t\t} else {\n\t\t\t\ttable = table['gen8dlc1'];\n\t\t\t}\n\t\t} else if (this.formatType === 'stadium') {\n\t\t\ttable = table['gen' + dex.gen + 'stadium' + (dex.gen > 1 ? dex.gen : '')];\n\t\t}\n\n\t\tif (!table.tierSet) {\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\n\t\t\t\treturn [r[0], r[1]];\n\t\t\t});\n\t\t\ttable.tiers = null;\n\t\t}\n\t\tlet tierSet: SearchRow[] = table.tierSet;\n\t\tlet slices: {[k: string]: number} = table.formatSlices;\n\t\tif (format === 'ubers' || format === 'uber') tierSet = tierSet.slice(slices.Uber);\n\t\telse if (isVGCOrBS) {\n\t\t\tif (format.endsWith('series13')) {\n\t\t\t\t// Show Mythicals\n\t\t\t} else if (\n\t\t\t\tformat === 'vgc2010' || format === 'vgc2016' || format.startsWith('vgc2019') ||\n\t\t\t\tformat === 'vgc2022' || format.endsWith('series10') || format.endsWith('series11')\n\t\t\t) {\n\t\t\t\ttierSet = tierSet.slice(slices[\"Restricted Legendary\"]);\n\t\t\t} else {\n\t\t\t\ttierSet = tierSet.slice(slices.Regular);\n\t\t\t}\n\t\t} else if (format === 'ou') tierSet = tierSet.slice(slices.OU);\n\t\telse if (format === 'uu') tierSet = tierSet.slice(slices.UU);\n\t\telse if (format === 'ru') tierSet = tierSet.slice(slices.RU || slices.UU);\n\t\telse if (format === 'nu') tierSet = tierSet.slice(slices.NU || slices.RU || slices.UU);\n\t\telse if (format === 'pu') tierSet = tierSet.slice(slices.PU || slices.NU);\n\t\telse if (format === 'zu') tierSet = tierSet.slice(slices.ZU || slices.PU || slices.NU);\n\t\telse if (format === 'lc' || format === 'lcuu' || format.startsWith('lc') || (format !== 'caplc' && format.endsWith('lc'))) tierSet = tierSet.slice(slices.LC);\n\t\telse if (format === 'cap') tierSet = tierSet.slice(0, slices.AG || slices.Uber).concat(tierSet.slice(slices.OU));\n\t\telse if (format === 'caplc') {\n\t\t\ttierSet = tierSet.slice(slices['CAP LC'], slices.AG || slices.Uber).concat(tierSet.slice(slices.LC));\n\t\t} else if (format === 'anythinggoes' || format.endsWith('ag') || format.startsWith('ag')) {\n\t\t\ttierSet = tierSet.slice(slices.AG);\n\t\t} else if (format.includes('hackmons') || format.endsWith('bh')) tierSet = tierSet.slice(slices.AG || slices.Uber);\n\t\telse if (format === 'monotype') tierSet = tierSet.slice(slices.Uber);\n\t\telse if (format === 'doublesubers') tierSet = tierSet.slice(slices.DUber);\n\t\telse if (format === 'doublesou' && dex.gen > 4) tierSet = tierSet.slice(slices.DOU);\n\t\telse if (format === 'doublesuu') tierSet = tierSet.slice(slices.DUU);\n\t\telse if (format === 'doublesnu') tierSet = tierSet.slice(slices.DNU || slices.DUU);\n\t\telse if (this.formatType?.startsWith('bdsp') || this.formatType === 'letsgo' || this.formatType === 'stadium') {\n\t\t\ttierSet = tierSet.slice(slices.Uber);\n\t\t} else if (!isDoublesOrBS) {\n\t\t\ttierSet = [\n\t\t\t\t...tierSet.slice(slices.OU, slices.UU),\n\t\t\t\t...tierSet.slice(slices.AG, slices.Uber),\n\t\t\t\t...tierSet.slice(slices.Uber, slices.OU),\n\t\t\t\t...tierSet.slice(slices.UU),\n\t\t\t];\n\t\t} else {\n\t\t\ttierSet = [\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\n\t\t\t\t...tierSet.slice(slices.DUU),\n\t\t\t];\n\t\t}\n\n\t\tif (dex.gen >= 5) {\n\t\t\tif (format === 'zu' && table.zuBans) {\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\n\t\t\t\t\tif (id in table.zuBans) return false;\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (format === 'monotype' && table.monotypeBans) {\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\n\t\t\t\t\tif (id in table.monotypeBans) return false;\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Filter out Gmax Pokemon from standard tier selection\n\t\tif (!/^(battlestadium|vgc|doublesubers)/g.test(format)) {\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\n\t\t\t\tif (type === 'header' && id === 'DUber by technicality') return false;\n\t\t\t\tif (type === 'pokemon') return !id.endsWith('gmax');\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\n\t\treturn tierSet;\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'pokemon') return true;\n\t\tconst species = this.dex.species.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'type':\n\t\t\t\tif (species.types[0] !== value && species.types[1] !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'egggroup':\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'tier':\n\t\t\t\tif (this.getTier(species) !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'ability':\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean) {\n\t\tconst sortOrder = reverseSort ? -1 : 1;\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst stat1 = this.dex.species.get(id1).baseStats[sortCol as StatName];\n\t\t\t\tconst stat2 = this.dex.species.get(id2).baseStats[sortCol as StatName];\n\t\t\t\treturn (stat2 - stat1) * sortOrder;\n\t\t\t});\n\t\t} else if (sortCol === 'bst') {\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst base1 = this.dex.species.get(id1).baseStats;\n\t\t\t\tconst base2 = this.dex.species.get(id2).baseStats;\n\t\t\t\tconst bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\n\t\t\t\tconst bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\n\t\t\t\treturn (bst2 - bst1) * sortOrder;\n\t\t\t});\n\t\t} else if (sortCol === 'name') {\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst name1 = id1;\n\t\t\t\tconst name2 = id2;\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\n\t\t\t});\n\t\t}\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\n\tgetTable() {\n\t\treturn BattleAbilities;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tconst results: SearchRow[] = [];\n\t\tfor (let id in BattleAbilities) {\n\t\t\tresults.push(['ability', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tgetBaseResults() {\n\t\tif (!this.species) return this.getDefaultResults();\n\t\tconst format = this.format;\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\n\t\tconst isAAA = (format === 'almostanyability' || format.includes('aaa'));\n\t\tconst dex = this.dex;\n\t\tlet species = dex.species.get(this.species);\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\n\n\t\tif (species.isMega) {\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\n\t\t\tspecies = dex.species.get(species.baseSpecies);\n\t\t}\n\t\tabilitySet.push(['ability', toID(species.abilities['0'])]);\n\t\tif (species.abilities['1']) {\n\t\t\tabilitySet.push(['ability', toID(species.abilities['1'])]);\n\t\t}\n\t\tif (species.abilities['H']) {\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\n\t\t\tabilitySet.push(['ability', toID(species.abilities['H'])]);\n\t\t}\n\t\tif (species.abilities['S']) {\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\n\t\t\tabilitySet.push(['ability', toID(species.abilities['S'])]);\n\t\t}\n\t\tif (isAAA || format.includes('metronomebattle') || isHackmons) {\n\t\t\tlet abilities: ID[] = [];\n\t\t\tfor (let i in this.getTable()) {\n\t\t\t\tconst ability = dex.abilities.get(i);\n\t\t\t\tif (ability.isNonstandard) continue;\n\t\t\t\tif (ability.gen > dex.gen) continue;\n\t\t\t\tabilities.push(ability.id);\n\t\t\t}\n\n\t\t\tlet goodAbilities: SearchRow[] = [['header', \"Abilities\"]];\n\t\t\tlet poorAbilities: SearchRow[] = [['header', \"Situational Abilities\"]];\n\t\t\tlet badAbilities: SearchRow[] = [['header', \"Unviable Abilities\"]];\n\t\t\tfor (const ability of abilities.sort().map(abil => dex.abilities.get(abil))) {\n\t\t\t\tlet rating = ability.rating;\n\t\t\t\tif (ability.id === 'normalize') rating = 3;\n\t\t\t\tif (rating >= 3) {\n\t\t\t\t\tgoodAbilities.push(['ability', ability.id]);\n\t\t\t\t} else if (rating >= 2) {\n\t\t\t\t\tpoorAbilities.push(['ability', ability.id]);\n\t\t\t\t} else {\n\t\t\t\t\tbadAbilities.push(['ability', ability.id]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tabilitySet = [...goodAbilities, ...poorAbilities, ...badAbilities];\n\t\t\tif (species.isMega) {\n\t\t\t\tif (isAAA) {\n\t\t\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\n\t\t\t\t}\n\t\t\t\t// species is unused after this, so no need to replace\n\t\t\t}\n\t\t}\n\t\treturn abilitySet;\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'ability') return true;\n\t\tconst ability = this.dex.abilities.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'pokemon':\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\n\tgetTable() {\n\t\treturn BattleItems;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tlet table = BattleTeambuilderTable;\n\t\tif (this.formatType?.startsWith('bdsp')) {\n\t\t\ttable = table['gen8bdsp'];\n\t\t} else if (this.formatType === 'natdex') {\n\t\t\ttable = table['gen' + this.dex.gen + 'natdex'];\n\t\t} else if (this.formatType === 'metronome') {\n\t\t\ttable = table['gen' + this.dex.gen + 'metronome'];\n\t\t} else if (this.dex.gen < 9) {\n\t\t\ttable = table['gen' + this.dex.gen];\n\t\t}\n\t\tif (!table.itemSet) {\n\t\t\ttable.itemSet = table.items.map((r: any) => {\n\t\t\t\tif (typeof r === 'string') {\n\t\t\t\t\treturn ['item', r];\n\t\t\t\t}\n\t\t\t\treturn [r[0], r[1]];\n\t\t\t});\n\t\t\ttable.items = null;\n\t\t}\n\t\treturn table.itemSet;\n\t}\n\tgetBaseResults(): SearchRow[] {\n\t\tif (!this.species) return this.getDefaultResults();\n\t\tconst speciesName = this.dex.species.get(this.species).name;\n\t\tconst results = this.getDefaultResults();\n\t\tconst speciesSpecific: SearchRow[] = [];\n\t\tfor (const row of results) {\n\t\t\tif (row[0] !== 'item') continue;\n\t\t\tif (this.dex.items.get(row[1]).itemUser?.includes(speciesName)) {\n\t\t\t\tspeciesSpecific.push(row);\n\t\t\t}\n\t\t}\n\t\tif (speciesSpecific.length) {\n\t\t\treturn [\n\t\t\t\t['header', \"Specific to \" + speciesName],\n\t\t\t\t...speciesSpecific,\n\t\t\t\t...results,\n\t\t\t];\n\t\t}\n\t\treturn results;\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'ability') return true;\n\t\tconst ability = this.dex.abilities.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'pokemon':\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\n\tsortRow: SearchRow = ['sortmove', ''];\n\tgetTable() {\n\t\treturn BattleMovedex;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tlet results: SearchRow[] = [];\n\t\tresults.push(['header', \"Moves\"]);\n\t\tfor (let id in BattleMovedex) {\n\t\t\tswitch (id) {\n\t\t\tcase 'paleowave':\n\t\t\t\tresults.push(['header', \"CAP moves\"]);\n\t\t\t\tbreak;\n\t\t\tcase 'magikarpsrevenge':\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresults.push(['move', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tprivate moveIsNotUseless(id: ID, species: Species, abilityid: ID, itemid: ID, moves: string[]) {\n\t\tconst dex = this.dex;\n\n\t\tif (dex.gen === 1) {\n\t\t\t// Usually not useless for Gen 1\n\t\t\tif ([\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'growth', 'headbutt', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\n\t\t\t].includes(id)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Usually useless for Gen 1\n\t\t\tif ([\n\t\t\t\t'disable', 'haze', 'leechseed', 'quickattack', 'roar', 'thunder', 'toxic', 'triattack', 'waterfall', 'whirlwind',\n\t\t\t].includes(id)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Not useless only when certain moves aren't present\n\t\t\tswitch (id) {\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\n\t\t\tcase 'doublekick': return !moves.includes('submission');\n\t\t\tcase 'firepunch': return !moves.includes('fireblast');\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\n\t\t\tcase 'stomp': return !moves.includes('headbutt');\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\n\t\t\tcase 'thunderpunch': return !moves.includes('thunderbolt');\n\t\t\tcase 'triattack': return !moves.includes('bodyslam');\n\t\t\t}\n\t\t\t// Useful and Useless moves for Stadium OU, which changes many game mechanics.\n\t\t\tif (this.formatType === 'stadium') {\n\t\t\t\tif (['doubleedge', 'focusenergy', 'haze'].includes(id)) return true;\n\t\t\t\tif (['hyperbeam', 'sing', 'hypnosis'].includes(id)) return false;\n\t\t\t\tswitch (id) {\n\t\t\t\tcase 'fly': return !moves.includes('drillpeck');\n\t\t\t\tcase 'dig': return !moves.includes('earthquake');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.formatType === 'letsgo') {\n\t\t\tif (['megadrain', 'teleport'].includes(id)) return true;\n\t\t}\n\n\t\tif (this.formatType === 'metronome') {\n\t\t\tif (id === 'metronome') return true;\n\t\t}\n\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\n\n\t\tswitch (id) {\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch':\n\t\t\treturn abilityid !== 'sheerforce';\n\t\tcase 'solarbeam': case 'solarblade':\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll'].includes(abilityid) || itemid === 'powerherb';\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing': case 'zapcannon':\n\t\t\treturn abilityid === 'noguard';\n\t\tcase 'heatcrash': case 'heavyslam':\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\n\n\t\tcase 'aerialace':\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\n\t\tcase 'ancientpower':\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\n\t\tcase 'aurawheel':\n\t\t\treturn species.baseSpecies === 'Morpeko';\n\t\tcase 'bellydrum':\n\t\t\treturn moves.includes('aquajet') || moves.includes('extremespeed') ||\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\n\t\tcase 'bulletseed':\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\n\t\tcase 'counter':\n\t\t\treturn species.baseStats.hp >= 65;\n\t\tcase 'darkvoid':\n\t\t\treturn dex.gen < 7;\n\t\tcase 'drainingkiss':\n\t\t\treturn abilityid === 'triage';\n\t\tcase 'dualwingbeat':\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\n\t\tcase 'feint':\n\t\t\treturn abilityid === 'refrigerate';\n\t\tcase 'grassyglide':\n\t\t\treturn abilityid === 'grassysurge';\n\t\tcase 'gyroball':\n\t\t\treturn species.baseStats.spe <= 60;\n\t\tcase 'headbutt':\n\t\t\treturn abilityid === 'serenegrace';\n\t\tcase 'hiddenpowerelectric':\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\n\t\tcase 'hiddenpowerfighting':\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\n\t\tcase 'hiddenpowerfire':\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower');\n\t\tcase 'hiddenpowergrass':\n\t\t\treturn !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain');\n\t\tcase 'hiddenpowerice':\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) || (dex.gen > 5 && !moves.includes('aurorabeam'));\n\t\tcase 'hiddenpowerflying':\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\n\t\tcase 'hiddenpowerbug':\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\n\t\tcase 'hiddenpowerpsychic':\n\t\t\treturn species.baseSpecies === 'Unown';\n\t\tcase 'hyperspacefury':\n\t\t\treturn species.id === 'hoopaunbound';\n\t\tcase 'hypnosis':\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\n\t\tcase 'icywind':\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.formatType === 'doubles';\n\t\tcase 'infestation':\n\t\t\treturn moves.includes('stickyweb');\n\t\tcase 'irondefense':\n\t\t\treturn !moves.includes('acidarmor');\n\t\tcase 'irontail':\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\n\t\tcase 'jumpkick':\n\t\t\treturn !moves.includes('highjumpkick');\n\t\tcase 'leechlife':\n\t\t\treturn dex.gen > 6;\n\t\tcase 'mysticalfire':\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\n\t\tcase 'naturepower':\n\t\t\treturn dex.gen === 5;\n\t\tcase 'nightslash':\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\n\t\tcase 'petaldance':\n\t\t\treturn abilityid === 'owntempo';\n\t\tcase 'phantomforce':\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.formatType === 'doubles';\n\t\tcase 'poisonfang':\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\n\t\tcase 'relicsong':\n\t\t\treturn species.id === 'meloetta';\n\t\tcase 'refresh':\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\n\t\tcase 'risingvoltage':\n\t\t\treturn abilityid === 'electricsurge';\n\t\tcase 'rocktomb':\n\t\t\treturn abilityid === 'technician';\n\t\tcase 'selfdestruct':\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\n\t\tcase 'shadowpunch':\n\t\t\treturn abilityid === 'ironfist';\n\t\tcase 'smackdown':\n\t\t\treturn species.types.includes('Ground');\n\t\tcase 'smartstrike':\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\n\t\tcase 'soak':\n\t\t\treturn abilityid === 'unaware';\n\t\tcase 'steelwing':\n\t\t\treturn !moves.includes('ironhead');\n\t\tcase 'stompingtantrum':\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.formatType === 'doubles';\n\t\tcase 'stunspore':\n\t\t\treturn !moves.includes('thunderwave');\n\t\tcase 'technoblast':\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\n\t\tcase 'teleport':\n\t\t\treturn dex.gen > 7;\n\t\tcase 'terrainpulse': case 'waterpulse':\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\n\t\tcase 'trickroom':\n\t\t\treturn species.baseStats.spe <= 100;\n\t\t}\n\n\t\tif (this.formatType === 'doubles' && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst moveData = BattleMovedex[id];\n\t\tif (!moveData) return true;\n\t\tif (moveData.category === 'Status') {\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\n\t\t}\n\t\tif (moveData.basePower < 75) {\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\n\t\t}\n\t\tif (id === 'skydrop') return true;\n\t\t// strong moves\n\t\tif (moveData.flags?.charge) {\n\t\t\treturn itemid === 'powerherb';\n\t\t}\n\t\tif (moveData.flags?.recharge) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\n\t}\n\tstatic readonly GOOD_STATUS_MOVES = [\n\t\t'acidarmor', 'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'batonpass', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'drainingkiss', 'encore', 'extremeevoboost', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'memento', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'reflecttype', 'rest', 'roar', 'rockpolish', 'roost', 'shellsmash', 'shiftgear', 'shoreup', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'toxic', 'toxicspikes', 'transform', 'trick', 'whirlwind', 'willowisp', 'wish', 'yawn',\n\t] as ID[] as readonly ID[];\n\tstatic readonly GOOD_WEAK_MOVES = [\n\t\t'accelerock', 'acrobatics', 'aquajet', 'avalanche', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'endeavor', 'facade', 'firefang', 'flipturn', 'freezedry', 'frustration', 'geargrind', 'grassknot', 'gyroball', 'hex', 'icefang', 'iceshard', 'iciclespear', 'knockoff', 'lowkick', 'machpunch', 'nightshade', 'nuzzle', 'pikapapow', 'psychocut', 'pursuit', 'quickattack', 'rapidspin', 'return', 'rockblast', 'scorchingsands', 'seismictoss', 'shadowclaw', 'shadowsneak', 'sizzlyslide', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tailslap', 'tripleaxel', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball',\n\t] as ID[] as readonly ID[];\n\tstatic readonly BAD_STRONG_MOVES = [\n\t\t'beakblast', 'belch', 'burnup', 'crushclaw', 'doomdesire', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'futuresight', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'lastresort', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge',\n\t] as ID[] as readonly ID[];\n\tstatic readonly GOOD_DOUBLES_MOVES = [\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\n\t] as ID[] as readonly ID[];\n\tgetBaseResults() {\n\t\tif (!this.species) return this.getDefaultResults();\n\t\tconst dex = this.dex;\n\t\tlet species = dex.species.get(this.species);\n\t\tconst format = this.format;\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\n\t\tconst isSTABmons = (format.includes('stabmons') || format === 'staaabmons');\n\t\tconst isTradebacks = format.includes('tradebacks');\n\t\tconst regionBornLegality = dex.gen >= 6 &&\n\t\t\t/^battle(spot|stadium|festival)/.test(format) || format.startsWith('vgc') ||\n\t\t\t(dex.gen === 9 && this.formatType !== 'natdex');\n\n\t\tconst abilityid = this.set ? toID(this.set.ability) : '' as ID;\n\t\tconst itemid = this.set ? toID(this.set.item) : '' as ID;\n\n\t\tlet learnsetid = this.firstLearnsetid(species.id);\n\t\tlet moves: string[] = [];\n\t\tlet sketchMoves: string[] = [];\n\t\tlet sketch = false;\n\t\tlet gen = '' + dex.gen;\n\t\tlet lsetTable = BattleTeambuilderTable;\n\t\tif (this.formatType?.startsWith('bdsp')) lsetTable = lsetTable['gen8bdsp'];\n\t\tif (this.formatType === 'letsgo') lsetTable = lsetTable['gen7letsgo'];\n\t\tif (this.formatType?.startsWith('dlc1')) lsetTable = lsetTable['gen8dlc1'];\n\t\twhile (learnsetid) {\n\t\t\tlet learnset = lsetTable.learnsets[learnsetid];\n\t\t\tif (learnset) {\n\t\t\t\tfor (let moveid in learnset) {\n\t\t\t\t\tlet learnsetEntry = learnset[moveid];\n\t\t\t\t\tconst move = dex.moves.get(moveid);\n\t\t\t\t\tconst minGenCode: {[gen: number]: string} = {6: 'p', 7: 'q', 8: 'g', 9: 'a'};\n\t\t\t\t\tif (regionBornLegality && !learnsetEntry.includes(minGenCode[dex.gen])) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\t!learnsetEntry.includes(gen) &&\n\t\t\t\t\t\t(!isTradebacks ? true : !(move.gen <= dex.gen && learnsetEntry.includes('' + (dex.gen + 1))))\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.formatType !== 'natdex' && move.isNonstandard === \"Past\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.formatType?.startsWith('dlc1') &&\n\t\t\t\t\t\tBattleTeambuilderTable['gen8dlc1']?.nonstandardMoves.includes(moveid)\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (moves.includes(moveid)) continue;\n\t\t\t\t\tmoves.push(moveid);\n\t\t\t\t\tif (moveid === 'sketch') sketch = true;\n\t\t\t\t\tif (moveid === 'hiddenpower') {\n\t\t\t\t\t\tmoves.push(\n\t\t\t\t\t\t\t'hiddenpowerbug', 'hiddenpowerdark', 'hiddenpowerdragon', 'hiddenpowerelectric', 'hiddenpowerfighting', 'hiddenpowerfire', 'hiddenpowerflying', 'hiddenpowerghost', 'hiddenpowergrass', 'hiddenpowerground', 'hiddenpowerice', 'hiddenpowerpoison', 'hiddenpowerpsychic', 'hiddenpowerrock', 'hiddenpowersteel', 'hiddenpowerwater'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, species.id);\n\t\t}\n\t\tif (sketch || isHackmons) {\n\t\t\tif (isHackmons) moves = [];\n\t\t\tfor (let id in BattleMovedex) {\n\t\t\t\tif (!format.startsWith('cap') && (id === 'paleowave' || id === 'shadowstrike')) continue;\n\t\t\t\tconst move = dex.moves.get(id);\n\t\t\t\tif (move.gen > dex.gen) continue;\n\t\t\t\tif (sketch) {\n\t\t\t\t\tif (move.noSketch || move.isMax || move.isZ) continue;\n\t\t\t\t\tif (move.isNonstandard && move.isNonstandard !== 'Past') continue;\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\n\t\t\t\t\tsketchMoves.push(move.id);\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dex.gen < 8 || this.formatType === 'natdex') && move.isZ) continue;\n\t\t\t\t\tif (typeof move.isMax === 'string') continue;\n\t\t\t\t\tif (move.isMax && dex.gen > 8) continue;\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\n\t\t\t\t\tif (move.isNonstandard === 'LGPE' && this.formatType !== 'letsgo') continue;\n\t\t\t\t\tmoves.push(move.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.formatType === 'metronome') moves = ['metronome'];\n\t\tif (isSTABmons) {\n\t\t\tfor (let id in this.getTable()) {\n\t\t\t\tconst move = dex.moves.get(id);\n\t\t\t\tif (moves.includes(move.id)) continue;\n\t\t\t\tif (move.gen > dex.gen) continue;\n\t\t\t\tif (move.isZ || move.isMax || (move.isNonstandard && move.isNonstandard !== 'Unobtainable')) continue;\n\n\t\t\t\tconst speciesTypes: string[] = [];\n\t\t\t\tconst moveTypes: string[] = [];\n\t\t\t\tfor (let i = dex.gen; i >= species.gen && i >= move.gen; i--) {\n\t\t\t\t\tconst genDex = Dex.forGen(i);\n\t\t\t\t\tmoveTypes.push(genDex.moves.get(move.name).type);\n\n\t\t\t\t\tconst pokemon = genDex.species.get(species.name);\n\t\t\t\t\tlet baseSpecies = genDex.species.get(pokemon.changesFrom || pokemon.name);\n\t\t\t\t\tif (!pokemon.battleOnly) speciesTypes.push(...pokemon.types);\n\t\t\t\t\tlet prevo = pokemon.prevo;\n\t\t\t\t\twhile (prevo) {\n\t\t\t\t\t\tconst prevoSpecies = genDex.species.get(prevo);\n\t\t\t\t\t\tspeciesTypes.push(...prevoSpecies.types);\n\t\t\t\t\t\tprevo = prevoSpecies.prevo;\n\t\t\t\t\t}\n\t\t\t\t\tif (pokemon.battleOnly && typeof pokemon.battleOnly === 'string') {\n\t\t\t\t\t\tspecies = dex.species.get(pokemon.battleOnly);\n\t\t\t\t\t}\n\t\t\t\t\tconst excludedForme = (s: Species) => [\n\t\t\t\t\t\t'Alola', 'Alola-Totem', 'Galar', 'Galar-Zen', 'Hisui', 'Paldea', 'Paldea-Fire', 'Paldea-Water',\n\t\t\t\t\t].includes(s.forme);\n\t\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\n\t\t\t\t\t\tif (!excludedForme(species)) speciesTypes.push(...baseSpecies.types);\n\t\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\n\t\t\t\t\t\t\tconst forme = dex.species.get(formeName);\n\t\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) speciesTypes.push(...forme.types);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet valid = false;\n\t\t\t\tfor (let type of moveTypes) {\n\t\t\t\t\tif (speciesTypes.includes(type)) {\n\t\t\t\t\t\tvalid = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (valid) moves.push(id);\n\t\t\t}\n\t\t}\n\n\t\tmoves.sort();\n\t\tsketchMoves.sort();\n\n\t\tlet usableMoves: SearchRow[] = [];\n\t\tlet uselessMoves: SearchRow[] = [];\n\t\tfor (const id of moves) {\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, abilityid, itemid, moves);\n\t\t\tif (isUsable) {\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\n\t\t\t\tusableMoves.push(['move', id as ID]);\n\t\t\t} else {\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\n\t\t\t\tuselessMoves.push(['move', id as ID]);\n\t\t\t}\n\t\t}\n\t\tif (sketchMoves.length) {\n\t\t\tusableMoves.push(['header', \"Sketched moves\"]);\n\t\t\tuselessMoves.push(['header', \"Useless sketched moves\"]);\n\t\t}\n\t\tfor (const id of sketchMoves) {\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, abilityid, itemid, sketchMoves);\n\t\t\tif (isUsable) {\n\t\t\t\tusableMoves.push(['move', id as ID]);\n\t\t\t} else {\n\t\t\t\tuselessMoves.push(['move', id as ID]);\n\t\t\t}\n\t\t}\n\t\treturn [...usableMoves, ...uselessMoves];\n\t}\n\tfilter(row: SearchRow, filters: string[][]) {\n\t\tif (!filters) return true;\n\t\tif (row[0] !== 'move') return true;\n\t\tconst move = this.dex.moves.get(row[1]);\n\t\tfor (const [filterType, value] of filters) {\n\t\t\tswitch (filterType) {\n\t\t\tcase 'type':\n\t\t\t\tif (move.type !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'category':\n\t\t\t\tif (move.category !== value) return false;\n\t\t\t\tbreak;\n\t\t\tcase 'pokemon':\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[] {\n\t\tconst sortOrder = reverseSort ? -1 : 1;\n\t\tswitch (sortCol) {\n\t\tcase 'power':\n\t\t\tlet powerTable: {[id: string]: number | undefined} = {\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\n\t\t\t};\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tlet move1 = this.dex.moves.get(id1);\n\t\t\t\tlet move2 = this.dex.moves.get(id2);\n\t\t\t\tlet pow1 = move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\n\t\t\t\tlet pow2 = move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\n\t\t\t\treturn (pow2 - pow1) * sortOrder;\n\t\t\t});\n\t\tcase 'accuracy':\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tlet accuracy1 = this.dex.moves.get(id1).accuracy || 0;\n\t\t\t\tlet accuracy2 = this.dex.moves.get(id2).accuracy || 0;\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\n\t\t\t\treturn (accuracy2 - accuracy1) * sortOrder;\n\t\t\t});\n\t\tcase 'pp':\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tlet pp1 = this.dex.moves.get(id1).pp || 0;\n\t\t\t\tlet pp2 = this.dex.moves.get(id2).pp || 0;\n\t\t\t\treturn (pp2 - pp1) * sortOrder;\n\t\t\t});\n\t\tcase 'name':\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\n\t\t\t\tconst name1 = id1;\n\t\t\t\tconst name2 = id2;\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\n\t\t\t});\n\t\t}\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\n\tgetTable() {\n\t\treturn {physical: 1, special: 1, status: 1};\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\treturn [\n\t\t\t['category', 'physical' as ID],\n\t\t\t['category', 'special' as ID],\n\t\t\t['category', 'status' as ID],\n\t\t];\n\t}\n\tgetBaseResults() {\n\t\treturn this.getDefaultResults();\n\t}\n\tfilter(row: SearchRow, filters: string[][]): boolean {\n\t\tthrow new Error(\"invalid filter\");\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\n\tgetTable() {\n\t\treturn window.BattleTypeChart;\n\t}\n\tgetDefaultResults(): SearchRow[] {\n\t\tconst results: SearchRow[] = [];\n\t\tfor (let id in window.BattleTypeChart) {\n\t\t\tresults.push(['type', id as ID]);\n\t\t}\n\t\treturn results;\n\t}\n\tgetBaseResults() {\n\t\treturn this.getDefaultResults();\n\t}\n\tfilter(row: SearchRow, filters: string[][]): boolean {\n\t\tthrow new Error(\"invalid filter\");\n\t}\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\n\t\tthrow new Error(\"invalid sortcol\");\n\t}\n}\n"],"mappings":"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"}